# This properties file is used to filter for specific asserts in the pdf policy validation.
# All asserts that are set to 'true' will be evaluated.

# Pattern: Check for existence of Preflight element
## Rule (context): /
## Assert (test): preflight(Preflight root element missing)
Check\ for\ existence\ of\ Preflight\ element=true

# Pattern: Check for Preflight exceptions
## Rule (context): /preflight
## Assert (test): not(exceptionThrown)(Preflight exception)
Check\ for\ Preflight\ exceptions=true

# Pattern: Check for unknown errors
## Rule (context): /preflight/errors/error
## Assert (test): not(code = '-1')(Unknown error)
Check\ for\ unknown\ errors=true

# Pattern: Check for malformed PDF and general processing errors
## Rule (context): /preflight/errors/error
## Assert (test): not(code = '8')(Processing error (possibly malformed PDF))
## Assert (test): not(code = '8.1')(Mandatory element missing (possibly malformed PDF))
Check\ for\ malformed\ PDF\ and\ general\ processing\ errors=true

# Pattern: Checks for encryption
## Rule (context): /preflight/errors/error
## Assert (test): not(code = '1.0' and contains(details,'password'))(Open password)
## Assert (test): not(code = '1.4.2')(Encryption)
Checks\ for\ encryption=true

# Pattern: Check for font error, unspecified
## Rule (context): /preflight/errors/error
## Assert (test): not(code = '3')(Unspecified font error)
Check\ for\ font\ error,\ unspecified=true

# Pattern: Checks for invalid or incomplete font dictionaries
## Rule (context): /preflight/errors/error
## Assert (test): not(code = '3.1')(Invalid data in font dictionary)
## Assert (test): not(code = '3.1.1')(Mandatory fields missing from font dictionary)
## Assert (test): not(code = '3.1.2')(Mandatory fields missing from font descriptor dictionary)
## Assert (test): not(code = '3.1.3')(Error in font descriptor)
## Assert (test): not(code = '3.1.4')(Charset declaration missing in Type 1 subset)
## Assert (test): not(code = '3.1.5')(Encoding inconsistent with font)
## Assert (test): not(code = '3.1.6')(Width array and font program width inconsistent)
## Assert (test): not(code = '3.1.7')(Required entry missing in composite font dictionary)
## Assert (test): not(code = '3.1.8')(Invalid CIDSystemInfo dictionary)
## Assert (test): not(code = '3.1.9')(Invalid CIDToGID)
## Assert (test): not(code = '3.1.10')(Missing or invalid CMap in composite font)
## Assert (test): not(code = '3.1.11')(Missing CIDSet entry in subset of composite font)
## Assert (test): not(code = '3.1.12')(Missing or invalid CMap in composite font)
## Assert (test): not(code = '3.1.13')(Encoding entry can't be read due to IOException)
## Assert (test): not(code = '3.1.14')(Unknown font type)
Checks\ for\ invalid\ or\ incomplete\ font\ dictionaries=true

# Pattern: Checks for damaged embedded fonts
## Rule (context): /preflight/errors/error
## Assert (test): not(code = '3.2')(Damaged embedded font)
## Assert (test): not(code = '3.2.1')(Damaged embedded Type1 font)
## Assert (test): not(code = '3.2.2')(Damaged embedded TrueType font)
## Assert (test): not(code = '3.2.3')(Damaged embedded composite font)
## Assert (test): not(code = '3.2.4')(Damaged embedded type 3 font)
## Assert (test): not(code = '3.2.5')(Damaged embedded CID Map)
Checks\ for\ damaged\ embedded\ fonts=true

# Pattern: Checks for glyph errors
## Rule (context): /preflight/errors/error
## Assert (test): not(code = '3.3')(Glyph problem)
## Assert (test): not(code = '3.3.1')(Missing glyph)
## Assert (test): not(code = '3.3.2')(Missing glyph)
Checks\ for\ glyph\ errors=true

# Pattern: Check for JavaScript
## Rule (context): /preflight/errors/error
## Assert (test): not(code = '6.2.5' and contains(details,'JavaScript'))(JavaScript)
Check\ for\ JavaScript=true

# Pattern: Checks for embedded files and file attachments
## Rule (context): /preflight/errors/error
## Assert (test): not(code = '1.4.7')(Embedded file(s))
## Assert (test): not(code = '1.2.9')(Embedded file(s))
Checks\ for\ embedded\ files\ and\ file\ attachments=true

# Pattern: Checks for multimedia content
## Rule (context): /preflight/errors/error
## Assert (test): not(code = '5.2.1' and contains(details, 'Screen'))(Screen annotation)
## Assert (test): not(code = '5.2.1' and contains(details, 'Movie'))(Movie annotation)
## Assert (test): not(code = '5.2.1' and contains(details, 'Sound'))(Sound annotation)
## Assert (test): not(code = '5.2.1' and contains(details, '3D'))(3D annotation)
## Assert (test): not(code = '6.2.5' and contains(details, 'Movie'))(Movie action)
## Assert (test): not(code = '6.2.5' and contains(details, 'Sound'))(Sound action)
## Assert (test): not(code = '6.2.6' and contains(details, 'undefined'))(Undefined action (e.g. Rendition))
Checks\ for\ multimedia\ content=true

